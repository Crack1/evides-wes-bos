    // "sass-loader": "6.0.3",
      //"node-sass": "4.5.0",

a downgrade was required ->  npm install npm@5.3 -g


npm install -g npm-check
      npm-check



a express midleware always recieve 3 params (req,res,next) and alwyay youu should put next() to advanced when you finish your midleware

exports.myMidleware = (requ,res,next)=>{
      .................
      next()
}

you can use it when you put enside a fucntion:
      router.get('/', myMidleware, homepage)



app.use means that we are using global midleware

mongoose.Promise = global.Promise we tell to mongo use the global promises, and this mean use the native system of promises, we can use other like blue bird

res.locals
      I think that I can get the same propagation of data through the different middleware by using req.locals. Also, it appears that the request and response objects both have the locals properties initialized to an empty object at the start of the request.

      Also, one can set res.mydata or req.mydata properties too?

      In theory, app.locals can also be used for passing this data along through the different middleware as it will persist across middlewares but that would be contrary to the conventional use of app.locals. It is used more for application specific data. It will also be necessary to clear that data at the end of the request-response cycle so the same variables can be used for the next request.


By default, all attributes are escaped—that is,special characters are replaced with escape sequences—to prevent attacks (such as cross site scripting). If you need to use special characters, use != instead of =.

div(escaped="<code>")  === <div escaped="&lt;code&gt;"></div>
div(unescaped!="<code>") === <div unescaped="<code>"></div>


///what bodyParser.urlencoded({ extended: true }) does? allow us to use inputs that has nested data: exaple location[address]


  // if someone hits enter on the address field, dont submit the form
  input.on('keyboard', (e) => {
    if (e.keycode === 13) e.preventDefault()
  })


  AIzaSyAxN0sU9fM_yxcDD9nAkWMa-XBlKddbKqE

  buffer is the representation of a file in memory

  aggregation is the hability to do certain complex queries where you need to do multiple steps, an agreggation is a simple array where we are passing multiple commands  




With Promise.all() we can wait for many promises

  const tag = req.params.tag
  const tagsPromise = Store.getTagsList()
  const storesPromise = Store.find({
    tags: tag
  })
  const [tags, stores] = await Promise.all([tagsPromise, storesPromise])

if the first query dont return any store that has any tag property on it

  const tagQuery = tag || {
      $exists: true
    }
    const tagsPromise = Store.getTagsList()
    const storesPromise = Store.find({
      tags: tagQuery
    })

    //orinally User.register() return a callback but using promisify we can return a promise,  you need to especicfy two params, the methot to promisify and the object to realize the binding
    const register = promisify(User.register.bind(User))

    $gt: Date.now() mayor que 
