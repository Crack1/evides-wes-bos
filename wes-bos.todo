    // "sass-loader": "6.0.3",
      //"node-sass": "4.5.0",

a downgrade was required ->  npm install npm@5.3 -g


npm install -g npm-check
      npm-check



a express midleware always recieve 3 params (req,res,next) and alwyay youu should put next() to advanced when you finish your midleware

exports.myMidleware = (requ,res,next)=>{
      .................
      next()
}

you can use it when you put enside a fucntion:
      router.get('/', myMidleware, homepage)



app.use means that we are using global midleware

mongoose.Promise = global.Promise we tell to mongo use the global promises, and this mean use the native system of promises, we can use other like blue bird

res.locals
      I think that I can get the same propagation of data through the different middleware by using req.locals. Also, it appears that the request and response objects both have the locals properties initialized to an empty object at the start of the request.

      Also, one can set res.mydata or req.mydata properties too?

      In theory, app.locals can also be used for passing this data along through the different middleware as it will persist across middlewares but that would be contrary to the conventional use of app.locals. It is used more for application specific data. It will also be necessary to clear that data at the end of the request-response cycle so the same variables can be used for the next request.